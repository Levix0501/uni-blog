// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model DocumentModel {
  // 标识符
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  // 关系字段
  parentUuid  String?
  prevUuid    String?
  siblingUuid String?
  childUuid   String?
  level       Int

  // 数据字段
  title        String
  content      String  @default("") @db.Text
  abstract     String  @default("") @db.Text
  slug         String? @unique
  keywords     String? @db.Text
  cover        Image?  @relation(fields: [coverImageId], references: [id])
  coverImageId String?

  // 元数据字段
  isFolder    Boolean  @default(false)
  isPublished Boolean  @default(false)
  isArchived  Boolean  @default(false)
  viewCount   Int      @default(0)
  createTime  DateTime @default(now())
  updateTime  DateTime @updatedAt
}

model SiteSetting {
  id          Int     @id @default(1)
  siteName    String?
  logo        Image?  @relation(fields: [logoId], references: [id])
  logoId      String?
  description String?
  keywords    String?
  year        String?
  icp         String?
}

model AnalyticsSetting {
  id   Int     @id @default(1)
  gaId String?
  bdtj String?
}

model AdminSetting {
  id       Int     @id @default(1)
  password String?
}

enum StorageType {
  supabase // supabase
  local // 本地存储
  cos // 腾讯云 COS
}

model Image {
  id          String          @id @default(cuid())
  sign        String          @unique
  suffix      String
  url         String
  width       Int
  height      Int
  storageType StorageType
  createTime  DateTime
  updateTime  DateTime
  Post        Post[]
  SideNotice  SideNotice[]
  SiteSetting SiteSetting[]
  Document    DocumentModel[]
}

enum PostStatus {
  draft
  published
}

model Post {
  id       Int      @id @default(autoincrement())
  category Category @relation(fields: [categoryId], references: [id])
  title    String
  abstract String   @db.Text
  content  String   @db.Text
  cover    Image?   @relation(fields: [imageId], references: [id])

  slug     String? @unique
  keywords String? @db.Text

  status     PostStatus
  createTime DateTime
  updateTime DateTime

  categoryId String
  imageId    String?

  viewCount Int @default(0)
}

enum CategoryStatus {
  draft
  published
}

model Category {
  id         String         @id @default(cuid())
  slug       String         @unique
  name       String
  order      Int
  status     CategoryStatus
  createTime DateTime
  updateTime DateTime
  Post       Post[]
}

enum SideNoticeStatus {
  draft
  published
}

enum SideNoticeOrientation {
  vertical
  horizontal
}

model SideNotice {
  id          String                 @id @default(cuid())
  name        String
  desc        String                 @db.Text
  image       Image?                 @relation(fields: [imageId], references: [id])
  imageId     String?
  order       Int?
  status      SideNoticeStatus
  orientation SideNoticeOrientation?
  createTime  DateTime
  updateTime  DateTime
}
